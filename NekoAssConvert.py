"""
File: NekoAssConvert.py
Language: Python3
Author: 9volt <ninevult@gmail.com>
Purpose:
    Convert vector SVG files to the Advanced Substation Alpha (*.ass)
    format for use by advanced anime typesetters.
"""

# Imports
import sys
from xml.etree import ElementTree


# Global variables
NAME = "NekoAssConvert"
VERSION = str(0.1)

input_file = ""
output_file = ""
out_file = None


def read_input():
    """
    Reads through the input file using ElementTree to extract
    the commands, then send the arguments to be processed individually
    :return: None
    """
    tree = ElementTree.parse(input_file)
    root = tree.getroot()

    for child in root:
        if child.tag.startswith("{http://www.w3.org/2000/svg}"):
            command = child.tag[28:]
        else:
            command = child.tag

        # print(command)
        # Select appropriate function for the task
        if command == "rect":
            rect(child.attrib)
        elif command == "circle":
            circle(child.attrib)
        elif command == "ellipse":
            ellipse(child.attrib)


def rect(attribs):
    """
    Generates a rectangle
    Required attributes:
        x:      Origin x-coordinate
        y:      Origin y-coordinate
        width:  Width of the rectangle
        height: Height of the rectangle
    :param attribs: Parameters for creating the rectangle
    :return: None
    """
    x = attribs.get("x")
    y = attribs.get("y")
    width = attribs.get("width")
    height = attribs.get("height")
    generator = \
        "m", x, y, \
        "l", x, y, \
        "l", strsum(x, width), y, \
        "l", strsum(x, width), strsum(y, height), \
        "l", x, strsum(y, height)

    generator = " ".join(generator)

    add_line(generator)


def circle(attribs):
    """
    Generates a circle
    Required attributes:
        cx: Origin x-coordinate
        yy: Origin y-coordinate
        r:  Radius of the circle
    :param attribs: Parameters for creating the circle
    :return: None
    """
    x = attribs.get("cx")
    y = attribs.get("cy")
    r = attribs.get("r")
    generator = \
        "m", x, y, \
        "b", x, y,                              strsum(x, r), y,                    strsum(x, r), strsum(y, r), \
        "b", strsum(x, r), strsum(y, r),        strsum(x, r), strsum(y, r, r),      x, strsum(y, r, r), \
        "b", x, strsum(y, r, r),                strsub(x, r), strsum(y, r, r),      strsub(x, r), strsum(y, r), \
        "b", strsub(x, r), strsum(y, r),        strsub(x, r), y,                    x, y

    generator = " ".join(generator)
    add_line(generator)


def ellipse(attribs):
    """
    Generates an ellipse
    Required attributes:
        cx:  Origin x-coordinate
        yy:  Origin y-coordinate
        rx:  Radius on the x-axis
        ry:  Radius on the y-axis
    :param attribs: Parameters for creating the ellipse
    :return: None
    """
    x = attribs.get("cx")
    y = attribs.get("cy")
    rx = attribs.get("rx")
    ry = attribs.get("ry")
    generator = \
        "m", x, y, \
        "b", x, y,                              strsum(x, rx), y,                       strsum(x, rx), strsum(y, ry), \
        "b", strsum(x, rx), strsum(y, ry),      strsum(x, rx), strsum(y, ry, ry),       x, strsum(y, ry, ry), \
        "b", x, strsum(y, ry, ry),                 strsub(x, rx), strsum(y, ry, ry),       strsub(x, rx), strsum(y, ry), \
        "b", strsub(x, rx), strsum(y, ry),      strsub(x, rx), y,                       x, y
    generator = " ".join(generator)
    add_line(generator)


def add_line(text):
    """
    Generates a usable line for the ASS format
    :param text: Text to be appended to the end of the line
    :return:
    """
    out_file.write("Dialogue: 0,0:00:00.0,0:00:02.00,Default,,0,0,0,,{\\p1+}" + text + "{\\p0}\n")


def generate_file():
    """
    Generates ASS File template
    :return: None
    """
    global out_file
    first = out_file.read(1)
    if not first:
        # file = open(output_file, "w+")
        out_file.write("[Script Info]\n")
        out_file.write("; Script generated by " + NAME + " " + VERSION + "\n")
        out_file.write("; 9voltfansubs.wordpress.com\n")
        out_file.write("Title: NekoAssConvert Generated ASS File\n")
        out_file.write("ScriptType: v4.00+\n")
        out_file.write("WrapStyle: 0\n")
        out_file.write("ScaledBorderAndShadow: yes\n")
        out_file.write("YCbCr Matrix: None\n")
        out_file.write("\n")
        out_file.write("[Aegisub Project Garbage]\n")
        out_file.write("Active Line: 1\n")
        out_file.write("\n")
        out_file.write("[V4+ Styles]\n")
        out_file.write("Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, " +
                       "Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, " +
                       "Shadow, Alignment, MarginL, MarginR, MarginV, Encoding\n")
        out_file.write("Style: Default,Arial,20,&H00FFFFFF,&H000000FF,&H00000000,&H00000000," +
                       "0,0,0,0,100,100,0,0,1,0,2,2,10,10,10,1\n")
        out_file.write("\n")
        out_file.write("[Events]\n")
        out_file.write("Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text\n")
        # file.close()


def strsum(*args):
    """
    Adds String representations of integers together
    ex "5" + "2" --> "7"
    :param args: Strings to be "added"
    :return: The integer result as a string
    """
    result = 0
    for i in range(0, len(args)):
        x = args[i]
        result += int(x)
    return str(result)


def strsub(*args):
    """
    Subtracts String representations of integers together
    ex "5" - "2" --> "3"
    :param args: Strings to be "subtracted"
    :return: The integer result as a string
    """
    result = int(args[0])
    for i in range(1, len(args)):
        x = args[i]
        result -= int(x)
    return str(result)


def strmul(*args):
    """
    Multiplies String representations of integers together
    ex "5" * "2" --> "10"
    :param args: Strings to be "multiplied"
    :return: The integer result as a string
    """
    result = 0
    for i in range(0, len(args)):
        x = args[i]
        result *= int(x)
    return str(result)


def main():
    """
    Run the program.
    Requires 2 additional command-line arguments:
        1) Path to input SVG file
        2) Path to output ASS file
    :return: None
    """
    if len(sys.argv) < 3 or len(sys.argv) > 4:
        print("Usage:", NAME, "input.svg output.ass")
        sys.exit()

    global input_file
    global output_file
    global out_file
    input_file = sys.argv[1]
    output_file = sys.argv[2]
    out_file = open(output_file, "w+")

    generate_file()
    read_input()

    # clean up
    out_file.close()


# Run the main function
if __name__ == "__main__":
    main()
